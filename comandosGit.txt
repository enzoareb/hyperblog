$ pwd //ubicacion actual
$ mkdir //crear directorio (nueva carpeta)
$ touch archivo.extencion//crear archivo vacio
$ cat archivo.extencion//muestra el contenido del archivo
$ ls //listado de carpetas en donde me encuentro 
$ history //historial de comandos utilizados durante esa sesion
$ rm archivo.extencion //eliminacion de archivo
$ comando --help //ayuda sobre el comando
$ checkout //traer cambios realizado
---------------------------------------------------------------------------------------------
$ git init //inicializar el repositorio
$ git config --list //muestra la lista de configuracion de git
$ git config --list --show-origin//rutas de acceso a la configuración de git
---------------------------------------------------------------------------------------------
$ git add archivo.extencion //guardar archivo en staging
$ git add .// Agregar todos los cambios los archivos de la carpeta en la que nos encontramos
$ git commit -m “Mensaje”// Agregamos los cambios para el repositorio #si no agregamos mensaje, 
                            entra en el vim , salir con: esc + shift + "z""z
----------------------------------------------------------------------------------------------
$ git push //envia a repositorio remoto (github)
$ git pull //traer repositorio remoto
$ git clone url_del_servidor_remoto//permite descargar los archivos de la última versión
                             de la rama principal y todo el historial de cambios en la carpeta de trabajo y repositorio local
$ git fetch//trae actualizaciones del repositorio remoto y lo guarda en nuestro repositorio local.
$ git merge//trae los últimos cambios del servidor remoto a nuestro directorio de trabajo.
----------------------------------------------------------------------------------------------
$ git status // visualizar cambios
$ git log archivo.extencion //historial de cambios con detalles
$ git diff commitA commitB //comparar versiones
----------------------------------------------------------------------------------------------
##volver en el tiempo
--nos deja ir, mirar, pasear y volver.
$ git checkout + ID del commit //Podemos volver a cualquier versión anterior de un archivo específico 
                                o incluso del proyecto entero. Esta también es la forma de crear ramas
                                 y movernos entre ellas
--eliminar archivos de Git sin eliminar su historial del sistema de versiones.
$ git rm --cached// Elimina los archivos del área de Staging y del próximo commit pero los mantiene 
                    en nuestro disco duro.
$ git rm --force// Elimina los archivos de Git y del disco duro. Git siempre guarda todo, 
                    por lo que podemos acceder al registro de la existencia de los archivos, 
                    de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
-- volvemos al pasado sin la posibilidad de volver al futuro
$ git reset + ID del commit + --hard// Borra todo. Todo todito, absolutamente todo. Toda la información
                                     de los commits y del área de staging se borra del historial.
$ git reset + ID del commit + --soft// Borramos todo el historial y los registros de Git pero guardamos
                                     los cambios que tengamos en Staging, así podemos aplicar las 
                                     últimas actualizaciones a un nuevo commit.
$ git reset HEAD// sacar archivos del área de Staging. No para borrarlos ni nada de eso, 
                    solo para que los últimos cambios de estos archivos no se envíen al último commit
                     a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add
